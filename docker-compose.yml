name: ${APP_NAME}

services:
  backend:
    container_name: ${APP_NAME}_backend
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "9001:9001"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  goose:
    image: kukymbr/goose-docker:3.24.2
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=host=${POSTGRES_HOST} port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=${POSTGRES_DB}
    volumes:
      - ./internal/storage/postgres/migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  postgres:
    image: postgres:17
    container_name: ${APP_NAME}_database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5433:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
networks:
  app-network:
    driver: bridge
volumes:
  postgres_data: